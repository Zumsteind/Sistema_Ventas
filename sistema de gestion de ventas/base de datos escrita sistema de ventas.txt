create database db_sistema_ventas
go

use db_sistema_ventas
go

create table rol(
idrol int primary key identity,
descripcion varchar (50),
fecharegistro datetime default getdate()
)
go

create table permiso(
idpermiso int primary key identity,
idrol int references rol(idrol),
nombremenu varchar(50),
fecharegistro datetime default getdate()
)

go

create table proveedor(
idproveedor int primary key identity,
documento varchar(50),
razonsocial varchar(50),
correo varchar(50),
telefono varchar(50),
estado bit,
fecharegistro datetime default getdate()
)
go

create table cliente(
idcliente int primary key identity,
documento varchar(50),
nombrecompleto varchar(50),
correo varchar(50),
telefono varchar(50),
estado bit,
fecharegistro datetime default getdate()
)
go

create table usuario(
idusuario int primary key identity,
documento varchar(50),
nombrecompleto varchar(50),
correo varchar(70),
clave varchar(50),
idrol int references rol(idrol),
estado bit,
fecharegistro datetime default getdate()
)
go

create table categoria(
idcategoria int primary key identity,
descripcion varchar(50),
estado bit,
fecharegistro datetime default getdate()
)
go

create table producto(
idproducto int primary key identity,
codigo varchar(50),
nombre varchar(50),
descripcion varchar(50),
idcategoria int references categoria(idcategoria),
stock int not null default 0,
preciocompra decimal(10,2) default 0,
precioventa decimal(10,2) default 0,
estado bit,
fecharegistro  datetime default getdate()
)
go

create table compra(
idcompra int primary key identity,
idusuario int references usuario(idusuario),
idproveedor int references proveedor(idproveedor),
tipodocumento varchar(50),
numerodocumento varchar(50),
montototal decimal(10,2),
fecharegistro datetime default getdate()
)
go

create table detalle_compra(
iddetallecompra int primary key identity,
idcompra int references compra(idcompra),
idproducto int references producto(idproducto),
preciocompra decimal(10,2) default 0,
precioventa decimal(10,2) default 0,
cantidad int,
montototal decimal(10,2),
fecharegistro datetime default getdate()
)
go

create table venta(
idventa int primary key identity,
idusuario int references usuario(idusuario),
tipodocumento varchar(50),
numerodocumento varchar(50),
documentocliente varchar(50),
nombrecliente varchar(100),
montopago decimal(10,2),
montocambio decimal(10,2),
montototal decimal(10,2),
fecharegistro datetime default getdate()
)
go

create table detalle_venta(
iddetalleventa int primary key identity,
idventa int references venta(idventa),
idproducto int references producto(idproducto),
precioventa decimal(10,2),
cantidad int,
subtotal decimal(10,2),
fecharegistro datetime default getdate()
)


/*
create trigger BajaStock
ON detalle_venta
AFTER INSERT
AS

BEGIN
       DECLARE @IDproducto int, @Stock int
	   SET @IDproducto =(Select IDproducto FROM inserted)
	   set @Stock = (Select Cantidad FROM inserted)

	   UPDATE Producto
	   SET Stock = Stock - @Stock
	   WHERE IDproducto = @IDproducto
END
GO*/


--aca vamos hacer unos ingresos, para el loggin, y el permiso para cada usuario y rol. 


insert into rol (descripcion)values ('ADMINISTRADOR')

insert into rol (descripcion)values ('EMPLEADO')

insert into permiso (idrol,nombremenu) values
 (1,'menuusuario'),
 (1,'menumantenedor'),
 (1,'menuventas'),
 (1,'menucompras'),
 (1,'menuclientes'),
 (1,'menuproveedores'),
 (1,'menureportes'),
 (1,'menuacercade')


 insert into permiso (idrol,nombremenu) values
 (2,'menuventas'),
 (2,'menucompras'),
 (2,'menuclientes'),
 (2,'menuproveedores'),
 (2,'menuacercade')


  insert into usuario (documento,nombrecompleto,correo, clave,idrol,estado) values
 ('123456','ADMINISTRADOR','administrador@gmail.com','123456',1,1),
 ('987654', 'EMPLEADO','empleado@gmail.com', '987654',2,1)


 --PROCEDIMIENTOS DE USUARIOS

 create procedure SP_RegistrarUsuario(
 @Documento varchar(50),
 @NombreCompleto varchar(100),
 @Correo varchar(100),
 @Clave varchar(100),
 @IdRol int,
 @Estado bit ,
 @IdUsuarioResultado int output,
 @Mensaje varchar(500) output 
 )
 AS
 begin
        set @IdUsuarioResultado = 0
		set @Mensaje =''

		if not exists(select * from usuario where Documento = @Documento)
		begin
		     insert into usuario(Documento, nombrecompleto, correo, clave, idrol,estado) values
			 (@Documento, @NombreCompleto, @Correo, @Clave, @IdRol, @Estado)

			 set @IdUsuarioResultado = SCOPE_IDENTITY()			 
     	end
	else
	   set @Mensaje = 'El numero de documento que ingreso, ya se encuentra registrado. Intente nuevamente'

  end






  create procedure SP_EditarUsuario(
  @IdUsuario int,
 @Documento varchar(50),
 @NombreCompleto varchar(100),
 @Correo varchar(100),
 @Clave varchar(100),
 @IdRol int,
 @Estado bit ,
 @Respuesta bit output,
 @Mensaje varchar(500) output 
 )
 AS
 begin
        set @Respuesta = 0
		set @Mensaje =''

		if not exists(select * from usuario where Documento = @Documento and idusuario != @IdUsuario)
		begin
		     update usuario set
			 Documento = @Documento,
			 nombrecompleto = @NombreCompleto,
			 correo = @Correo,
			 clave = @Clave,
			 idrol  =@IdRol,
			 estado = @Estado
			 where idusuario = @IdUsuario

			 set @Respuesta = 1			 
     	end
	else
	   set @Mensaje = 'El numero de documento que ingreso, ya se encuentra registrado. Intente nuevamente'

  end




   create procedure SP_EliminarUsuario(
 @IdUsuario int,
 @Respuesta bit output,
 @Mensaje varchar(500) output 
 )
 AS
 begin
        set @Respuesta = 0
		set @Mensaje =''
		declare @pasoReglas bit = 1

		if exists (select * from compra c
		inner join usuario u on u.IdUsuario = c.IdUsuario
		where u.IdUsuario = @IdUsuario
		)
		begin
		    set @pasoReglas = 0
		    set @Respuesta = 0
			set @Mensaje =@Mensaje + 'No se puede eliminar el usuario porque se encuentra relacionado a una COMPRA\n'
		end


		if exists (select * from venta v
		inner join usuario u on u.IdUsuario = v.IdUsuario
		where u.IdUsuario = @IdUsuario
		)
		begin
		    set @pasoReglas = 0
		    set @Respuesta = 0
			set @Mensaje = @Mensaje + 'No se puede eliminar el usuario porque se encuentra relacionado a una VENTA\n'
		end


		if(@pasoReglas =1)
		begin
		     delete from usuario where IdUsuario = @IdUsuario
			 set @Respuesta = 1
		end
  end


  --PROCEDIMIENTOS DE CATEGOR√çAS
 
 create procedure SP_RegistrarCategoria(
 @Descripcion varchar(50),
 @Estado bit,
 @Resultado int output,
 @Mensaje varchar(500) output
 )
 AS
 BEGIN
      SET @Resultado = 0
	  IF NOT EXISTS(Select * from Categoria where Descripcion = @Descripcion)
	  begin
	       insert into Categoria(Descripcion, estado) values (@Descripcion, @Estado)
		   set @Resultado = scope_Identity()
      end
	  ELSE
	      set @Mensaje= 'No se puede repetir la descripcion de una Categoria'
end
go


create procedure SP_EditarCategoria(
 @IdCategoria int,
 @Descripcion varchar(50),
 @Estado bit,
 @Resultado bit output,
 @Mensaje varchar(500) output
 )
 AS
 BEGIN
      SET @Resultado = 1
	  IF NOT EXISTS(Select * from Categoria where Descripcion = @Descripcion AND idcategoria !=@IdCategoria)

	    update categoria set
		descripcion=@Descripcion,
		Estado = @Estado
		where idcategoria = @IdCategoria
	else
	begin
	   set @Resultado=0
	   set @Mensaje = 'No se puede repetir la descripcion de una categoria'
	end
end

go



create procedure SP_EliminarCategoria(
 @IdCategoria int,
 @Resultado bit output,
 @Mensaje varchar(500) output
 )
 AS
 BEGIN
      SET @Resultado = 1
	  IF NOT EXISTS(
	  select * from Categoria c
	  inner join producto p on p.idCategoria = c.IdCategoria
	  where c.IdCategoria = @IdCategoria
	  )
	  begin
	  delete top(1) from categoria Where idcategoria = @IdCategoria
	  end
	  else
	 begin
	   set @Resultado=0
	   set @Mensaje = 'La categoria se encuentra relacionada a un producto'
      end
end
go




--PROCEDIMIENTOS DE PRODUCTOS

create procedure SP_RegistrarProducto (
@Codigo varchar(20),
@Nombre varchar(30),
@Descripcion varchar(100),
@IdCategoria int,
@Estado bit,
@Resultado int output,
@Mensaje varchar (500) output
)
AS
Begin
   set @Resultado = 0
   if NOT EXISTS (Select * from Producto where Codigo = @Codigo)
   begin
        Insert into producto(codigo,nombre,descripcion,idcategoria, estado) values(@Codigo,@Nombre,@Descripcion,@IdCategoria,@Estado)
		set @Resultado = SCOPE_IDENTITY()
   end
      else
	      set @Mensaje ='Ya existe un Producto con el mismo codigo'
end
go
       
create procedure SP_ModificarProducto(
@IdProducto int,
@Codigo varchar(20),
@Nombre varchar(30),
@Descripcion varchar(100),
@IdCategoria int,
@Estado bit,
@Resultado bit output,
@Mensaje varchar(500) output
)
AS
begin
     set @Resultado = 1
	 if NOT EXISTS (Select * from producto where codigo =@Codigo and idproducto != @IdProducto)

	   update producto set
	   codigo = @Codigo,
	   nombre = @Nombre,
	   descripcion = @Descripcion,
	   idcategoria = @IdCategoria,
	   estado=@Estado
	   where idproducto = @IdProducto
	else
	begin
	     set @Resultado = 0
		 set @Mensaje = 'Ya existe un producto con el mismo codigo'
    end
end
go


create procedure SP_EliminarProducto(
@IdProducto int,
@Respuesta bit output,
@Mensaje varchar(500) output 
)
as
begin
     set @Respuesta = 0
	 set @Mensaje=''
	 declare @pasoReglas bit = 1

	 if exists (select * from detalle_compra dc
	 inner join producto p on p.idproducto = dc.idproducto
	 where p.idproducto = @IdProducto
	 )
	 begin
	      set @pasoReglas = 0
		  set @Respuesta = 0
		  set @Mensaje = @Mensaje + 'No se puede eliminar porque se encuentra relacionado a una COMPRA\n'
     end

	 if exists (Select * from detalle_venta dc
	 inner join producto p on p.idproducto = dc.idproducto
	 where p.idproducto = @IdProducto
	 )
	 begin
	      set @pasoReglas = 0
		  set @Respuesta = 0
		  set @Mensaje = @Mensaje + 'No se puede elimiar porque se encuentra relacionada a una VENTA\n'
	 end

	 if(@pasoReglas = 1)
	 begin
	     delete from producto where idproducto = @IdProducto
		 set @Respuesta = 1
	 end
end
go



--PROCEDIMIENTOS DE CLIENTES

create procedure SP_RegistrarCliente(
@Documento varchar(20),
@NombreCompleto varchar(50),
@Correo varchar(60),
@Telefono varchar(20),
@Estado bit,
@Resultado int output,
@Mensaje varchar(500) output
)
as
begin
     set @Resultado = 0
	 declare @IdPersona int
	 if not exists(Select * from cliente where documento = @Documento)
	 begin
	      insert into cliente(documento, nombrecompleto, correo, telefono,estado)
		  values(@Documento, @NombreCompleto, @Correo, @Telefono, @Estado)

		  set @Resultado = SCOPE_IDENTITY();
	 end
	 else
	     set @Mensaje ='El numero de documento ya existe'
end
go

alter procedure SP_ModificarCliente(
@IdCliente int,
@Documento varchar(20),
@NombreCompleto varchar(50),
@Correo varchar(60),
@Telefono varchar(20),
@Estado bit,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
    set @Resultado = 1
	declare @IdPersona int
	if not exists (Select * from cliente where documento = @Documento and idcliente != @IdCliente)
	begin
	     update cliente set
		 documento =@Documento,
		 nombrecompleto = @NombreCompleto,
		 correo = @Correo,
		 telefono = @Telefono,
		 estado = @Estado
		 where idcliente = @IdCliente
	 end
	 else
	 begin
	     set @Resultado = 0
		 set @Mensaje ='El numero de documento ya existe'
	 end
end
go


--PROCEDIMIENTOS DE PROVEEDORES

create procedure SP_RegistrarProveedor(
@Documento varchar(20),
@RazonSocial varchar(50),
@Correo varchar(60),
@Telefono varchar(20),
@Estado bit,
@Resultado int output,
@Mensaje varchar(500) output
)
as
Begin
    set @Resultado = 0
	declare @IdPersona int
	if not exists (Select * from proveedor where documento = @Documento)
	begin
	     insert into proveedor(documento, razonsocial, correo, telefono, estado)
		 values(@Documento, @RazonSocial, @Correo, @Telefono, @Estado)

		 set @Resultado = SCOPE_IDENTITY()
	 end
	 else
	     set @Mensaje ='El numero de Documento ya existe'
end
go


create procedure SP_ModificarProveedor(
@IdProveedor int,
@Documento varchar(20),
@RazonSocial varchar(50),
@Correo varchar(60),
@Telefono varchar(20),
@Estado bit,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
     set @Resultado=1
	 declare @IdPersona int
	 if not exists (Select * from proveedor where documento = @Documento and idproveedor != @IdProveedor)
	 begin
	     update proveedor set
		 documento = @Documento,
		 razonsocial = @RazonSocial,
		 correo = @Correo,
		 telefono = @Telefono,
		 estado = @Estado
		 where idproveedor = @IdProveedor
	 end
	 else
	 begin
	      set @Resultado = 0
		  set @Mensaje = 'El numero de Documento ya existe'
     end
end
go


create procedure SP_EliminarProveedor(
@IdProveedor int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
     set @Resultado = 1
	 if not exists (
	 select * from proveedor p
	 inner join compra c on p.idproveedor = c.idproveedor
	 where p.idproveedor = @IdProveedor
	 )
	 begin
	 delete top(1) from proveedor where idproveedor = @IdProveedor
	 end
	 else
	 begin
	     set @Resultado =0
		 set @Mensaje ='El proveedor se encuentra relacionado a una compra'
	 end
end
go
